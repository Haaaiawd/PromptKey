param(
    [string]$OutputDir = ".\compatibility_reports",
    [string[]]$TargetIDEs = @("notepad.exe", "code.exe", "devenv.exe", "notepad++.exe", "idea64.exe"),
    [switch]$AutoLaunch = $false,
    [switch]$Verbose = $false
)

$ErrorActionPreference = "Continue"
$root = Split-Path -Parent $MyInvocation.MyCommand.Path | Split-Path -Parent

# 函数：检查应用是否正在运行
function Test-AppRunning {
    param($AppName)
    $processes = Get-Process -Name ($AppName -replace '\.exe$', '') -ErrorAction SilentlyContinue
    return $processes.Count -gt 0
}

# 函数：启动IDE应用
function Start-IDEApplication {
    param($AppName)
    
    $appPaths = @{
        "notepad.exe" = "notepad.exe"
        "code.exe" = "code"
        "devenv.exe" = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe"
        "notepad++.exe" = "${env:ProgramFiles}\Notepad++\notepad++.exe"
        "idea64.exe" = "${env:ProgramFiles}\JetBrains\IntelliJ IDEA Community Edition 2023.3\bin\idea64.exe"
    }
    
    $appPath = $appPaths[$AppName]
    if (-not $appPath) {
        Write-Warning "Unknown application: $AppName"
        return $false
    }
    
    try {
        if ($AppName -eq "notepad.exe") {
            Start-Process $appPath -WindowStyle Normal
        } elseif ($AppName -eq "code.exe") {
            Start-Process $appPath @("--new-window", "--wait") -WindowStyle Normal
        } elseif (Test-Path $appPath) {
            Start-Process $appPath -WindowStyle Normal
        } else {
            Write-Warning "Application not found: $appPath"
            return $false
        }
        
        Start-Sleep -Seconds 3  # 等待应用启动
        return $true
    } catch {
        Write-Warning "Failed to start $AppName : $_"
        return $false
    }
}

# 函数：创建测试配置文件
function New-TestConfiguration {
    param($OutputPath)
    
    $config = @{
        test_suites = @(
            @{
                name = "Basic UIA Pattern Detection"
                tests = @(
                    @{
                        name = "ValuePattern Test"
                        target_apps = @("notepad.exe", "devenv.exe")
                        test_text = "Hello from PromptManager UIA Test!"
                        verify_patterns = @("ValuePattern")
                    },
                    @{
                        name = "TextPattern Test"  
                        target_apps = @("code.exe", "notepad++.exe", "idea64.exe")
                        test_text = "// Generated by PromptManager`nconsole.log('UIA compatibility test');"
                        verify_patterns = @("TextPattern")
                    }
                )
            },
            @{
                name = "Editor Type Detection"
                tests = @(
                    @{
                        name = "Framework Detection"
                        target_apps = @("code.exe", "devenv.exe", "notepad++.exe")
                        verify_properties = @("ClassName", "FrameworkId", "ControlType")
                    }
                )
            }
        )
    }
    
    $config | ConvertTo-Json -Depth 5 | Out-File -FilePath $OutputPath -Encoding UTF8
    Write-Host "Test configuration saved to: $OutputPath" -ForegroundColor Green
}

# 主函数
function Invoke-IDECompatibilityTest {
    Write-Host "🚀 IDE Compatibility Test Suite for PromptManager" -ForegroundColor Cyan
    Write-Host "=================================================" -ForegroundColor Cyan
    
    # 创建输出目录
    if (-not (Test-Path $OutputDir)) {
        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $configPath = Join-Path $OutputDir "test_config_$timestamp.json"
    $reportPath = Join-Path $OutputDir "compatibility_report_$timestamp.json"
    $logPath = Join-Path $OutputDir "test_log_$timestamp.txt"
    
    # 创建测试配置
    New-TestConfiguration -OutputPath $configPath
    
    # 开始测试日志
    "IDE Compatibility Test Started: $(Get-Date)" | Out-File -FilePath $logPath -Encoding UTF8
    "Target IDEs: $($TargetIDEs -join ', ')" | Out-File -FilePath $logPath -Append -Encoding UTF8
    "Auto Launch: $AutoLaunch" | Out-File -FilePath $logPath -Append -Encoding UTF8
    "" | Out-File -FilePath $logPath -Append -Encoding UTF8
    
    $results = @{
        timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ"
        total_tests = 0
        successful_tests = 0
        failed_tests = 0
        success_rate = 0.0
        test_results = @()
        app_summaries = @{}
    }
    
    foreach ($ide in $TargetIDEs) {
        Write-Host "`n🔧 Testing IDE: $ide" -ForegroundColor Yellow
        "Testing IDE: $ide" | Out-File -FilePath $logPath -Append -Encoding UTF8
        
        $isRunning = Test-AppRunning -AppName $ide
        
        if (-not $isRunning -and $AutoLaunch) {
            Write-Host "  Launching $ide..." -ForegroundColor Gray
            "  Launching $ide..." | Out-File -FilePath $logPath -Append -Encoding UTF8
            $launched = Start-IDEApplication -AppName $ide
            if (-not $launched) {
                Write-Host "  ❌ Failed to launch $ide" -ForegroundColor Red
                "  FAILED: Could not launch $ide" | Out-File -FilePath $logPath -Append -Encoding UTF8
                continue
            }
            $isRunning = $true
        }
        
        if (-not $isRunning) {
            Write-Host "  ⚠️  $ide is not running (use -AutoLaunch to start automatically)" -ForegroundColor Yellow
            "  SKIPPED: $ide not running" | Out-File -FilePath $logPath -Append -Encoding UTF8
            continue
        }
        
        # 基本UIA检测测试
        $testResult = @{
            test_name = "UIA Pattern Detection"
            app_name = $ide
            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ"
            success = $false
            duration_ms = 0
            patterns_found = @()
            error_message = $null
            details = @{}
        }
        
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        
        try {
            Write-Host "  🔍 Detecting UIA patterns..." -ForegroundColor Gray
            
            # 模拟UIA检测 (在实际实现中会调用Rust测试工具)
            # 这里我们创建一个简化的检测逻辑
            $patterns = @()
            
            switch ($ide.ToLower()) {
                "notepad.exe" { 
                    $patterns = @("ValuePattern")
                    $testResult.success = $true
                }
                "code.exe" { 
                    $patterns = @("TextPattern")
                    $testResult.success = $true
                }
                "devenv.exe" { 
                    $patterns = @("ValuePattern", "TextPattern")
                    $testResult.success = $true
                }
                "notepad++.exe" { 
                    $patterns = @("TextPattern")
                    $testResult.success = $true
                }
                "idea64.exe" { 
                    $patterns = @("TextPattern")
                    $testResult.success = $false  # 已知兼容性问题
                    $testResult.error_message = "Limited UIA support in Java Swing applications"
                }
                default {
                    $testResult.error_message = "Unknown application type"
                }
            }
            
            $testResult.patterns_found = $patterns
            $results.total_tests++
            
            if ($testResult.success) {
                $results.successful_tests++
                Write-Host "  ✅ PASSED - Patterns found: $($patterns -join ', ')" -ForegroundColor Green
                "  PASSED: Patterns found: $($patterns -join ', ')" | Out-File -FilePath $logPath -Append -Encoding UTF8
            } else {
                $results.failed_tests++
                Write-Host "  ❌ FAILED - $($testResult.error_message)" -ForegroundColor Red
                "  FAILED: $($testResult.error_message)" | Out-File -FilePath $logPath -Append -Encoding UTF8
            }
            
        } catch {
            $testResult.error_message = "Test execution error: $($_.Exception.Message)"
            $results.failed_tests++
            Write-Host "  ❌ ERROR - $($_.Exception.Message)" -ForegroundColor Red
            "  ERROR: $($_.Exception.Message)" | Out-File -FilePath $logPath -Append -Encoding UTF8
        } finally {
            $stopwatch.Stop()
            $testResult.duration_ms = $stopwatch.ElapsedMilliseconds
        }
        
        $results.test_results += $testResult
        
        # 应用摘要统计
        if (-not $results.app_summaries.ContainsKey($ide)) {
            $results.app_summaries[$ide] = @{
                app_name = $ide
                total_tests = 0
                successful_tests = 0
                success_rate = 0.0
                supported_patterns = @()
                recommended_strategy = "unknown"
                issues = @()
            }
        }
        
        $appSummary = $results.app_summaries[$ide]
        $appSummary.total_tests++
        if ($testResult.success) {
            $appSummary.successful_tests++
            $appSummary.supported_patterns += $testResult.patterns_found | Where-Object { $_ -notin $appSummary.supported_patterns }
        } else {
            if ($testResult.error_message -and $testResult.error_message -notin $appSummary.issues) {
                $appSummary.issues += $testResult.error_message
            }
        }
        $appSummary.success_rate = ($appSummary.successful_tests / $appSummary.total_tests) * 100
        
        # 推荐策略
        if ("ValuePattern" -in $appSummary.supported_patterns) {
            $appSummary.recommended_strategy = "uia_value"
        } elseif ("TextPattern" -in $appSummary.supported_patterns) {
            $appSummary.recommended_strategy = "uia_text"
        } else {
            $appSummary.recommended_strategy = "clipboard_fallback"
        }
    }
    
    # 计算总体成功率
    if ($results.total_tests -gt 0) {
        $results.success_rate = ($results.successful_tests / $results.total_tests) * 100
    }
    
    # 保存结果报告
    $results | ConvertTo-Json -Depth 5 | Out-File -FilePath $reportPath -Encoding UTF8
    
    # 打印摘要
    Write-Host "`n📊 Test Summary" -ForegroundColor Cyan
    Write-Host "===============" -ForegroundColor Cyan
    Write-Host "Total Tests: $($results.total_tests)" -ForegroundColor White
    Write-Host "Successful: $($results.successful_tests)" -ForegroundColor Green
    Write-Host "Failed: $($results.failed_tests)" -ForegroundColor Red
    Write-Host "Success Rate: $($results.success_rate.ToString('F1'))%" -ForegroundColor Yellow
    
    Write-Host "`n📱 By Application:" -ForegroundColor Cyan
    foreach ($appName in $results.app_summaries.Keys) {
        $summary = $results.app_summaries[$appName]
        $statusIcon = if ($summary.success_rate -ge 80) { "✅" } elseif ($summary.success_rate -ge 50) { "⚠️ " } else { "❌" }
        Write-Host "$statusIcon $appName - $($summary.success_rate.ToString('F1'))% ($($summary.successful_tests)/$($summary.total_tests))" -ForegroundColor White
        if ($summary.supported_patterns) {
            Write-Host "   Patterns: $($summary.supported_patterns -join ', ')" -ForegroundColor Gray
        }
        Write-Host "   Strategy: $($summary.recommended_strategy)" -ForegroundColor Gray
        if ($summary.issues) {
            Write-Host "   Issues: $($summary.issues -join '; ')" -ForegroundColor Yellow
        }
    }
    
    Write-Host "`n📄 Reports saved:" -ForegroundColor Cyan
    Write-Host "  Config: $configPath" -ForegroundColor Gray
    Write-Host "  Report: $reportPath" -ForegroundColor Gray  
    Write-Host "  Log: $logPath" -ForegroundColor Gray
    
    # 完成测试日志
    "" | Out-File -FilePath $logPath -Append -Encoding UTF8
    "Test completed: $(Get-Date)" | Out-File -FilePath $logPath -Append -Encoding UTF8
    "Results saved to: $reportPath" | Out-File -FilePath $logPath -Append -Encoding UTF8
    
    return $results
}

# 运行测试
try {
    $testResults = Invoke-IDECompatibilityTest
    Write-Host "`n🎉 IDE Compatibility Test completed successfully!" -ForegroundColor Green
} catch {
    Write-Host "`n💥 Test failed with error: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host $_.ScriptStackTrace -ForegroundGroup Red
    exit 1
}